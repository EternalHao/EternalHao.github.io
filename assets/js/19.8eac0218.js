(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{156:function(_,v,t){"use strict";t.r(v);var l=t(0),a=Object(l.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("blockquote",[t("p",[_._v("经典必问\n问到事务这块你就扯这些")])]),_._v(" "),t("h3",{attrs:{id:"_1-数据库的事务你了解多少"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据库的事务你了解多少"}},[_._v("#")]),_._v(" 1. 数据库的事务你了解多少?")]),_._v(" "),t("blockquote",[t("p",[_._v("事务是数据库区别于文件系统的一个重要特性之一(其实就和git差不多),首先事务是InnoBD存储引擎特有的,通过START TRANSACTION,BEGIN 开启事务,通过COMMIT命令提交事务,如果需要回滚事务就需要ROLLBACK命令回滚事务,当然,MYSQL的事务默认是自动提交的,可以通过SET AUTOCOMMIT来改变,提到事务就不得不提他的隔离级别和它的四个特性.(其实这都是废话,重要的引出下面的事务隔离级别)")])]),_._v(" "),t("blockquote",[t("p",[_._v("1.特性描述")])]),_._v(" "),t("ol",[t("li",[_._v("原子性: 事务是一个原子操作单元,其对数据的修改,要么全部成功要么全部失败")]),_._v(" "),t("li",[_._v("一致性: 在事务开始和完成时,数据必须保证一致的状态")]),_._v(" "),t("li",[_._v("隔离性: 这个举个例子就是我的操作不能影响你的操作,事务直接相互隔离 主要实现的并发控制")]),_._v(" "),t("li",[_._v("持久性: 事务在完成后,它对于数据的修改是永久性的,保存到数据库")])]),_._v(" "),t("blockquote",[t("p",[_._v("2.并发问题描述:")])]),_._v(" "),t("ul",[t("li",[_._v("脏读（Dirty Reads）：\n事务A对一条记录发生了修改,但是这个事务还没有提交,这条记录的数据就处于不一致的状态,事务B此时读取就读取到了事务A未提交的数据.")]),_._v(" "),t("li",[_._v("不可重复读（Non-Repeatable Reads）：\n事务A在读取数据的时候,这条数据已经发生了改变,或者记录已经被删除")]),_._v(" "),t("li",[_._v("幻读（Phantom Reads）：\n事务A按照一定查询条件读取到数据,再进行一次重新的读取后发现事务B插入了新的数据")])]),_._v(" "),t("p",[_._v("这时停顿一下,面试官可能让你继续说,你就开始巴巴,隔离级别怎么也要说个10分钟把,毕竟是你精心准备")]),_._v(" "),t("blockquote",[t("p",[_._v("3.事务隔离级别:")])]),_._v(" "),t("blockquote",[t("p",[_._v("事务的隔离级别机制主要是用来解决 "),t("code",[_._v("脏读、不可重复读、幻读")]),_._v("(这块一定要引出这个话题),出现这些问题的原因在于出现了并发事务,也就是不止一个事务操纵同一个数据行,为了降低并发带来的副作用,换句话说如果只有一个事务是没有这些问题的,在不同的隔离级别下可以解决不同的问题,隔离级别主要有四种")])]),_._v(" "),t("ol",[t("li",[_._v("读未提交 存在 存在 存在")]),_._v(" "),t("li",[_._v("读已提交 解决 存在 存在")]),_._v(" "),t("li",[_._v("可重复读 解决 解决 存在")]),_._v(" "),t("li",[_._v("可序列化 解决 解决 解决\n数据库默认的隔离级别是 可重复读")])]),_._v(" "),t("p",[_._v("说完这个此时再引出 隔离级别的实现方式")]),_._v(" "),t("blockquote",[t("p",[_._v("4.隔离级别的实现方式")])]),_._v(" "),t("blockquote",[t("p",[_._v("要实现事务的隔离级别,其实就是解决事务的并发问题,解决并发问题,通常的处理方法就是加锁,在事务开始的时候加锁,提交或回滚的时候释放锁,但是MySql还提供了一种不加锁的方式-那就是大名定定的MVCC,全称叫做多版本控制(说到这里停顿一下,看面试官的反应)")])]),_._v(" "),t("p",[_._v("以下会出现大概率的问你 什么是MVCC,那你赚到了,毕竟我们准备了")]),_._v(" "),t("blockquote",[t("p",[_._v("介绍MVCC\n在MVCC并发控制中，读操作可以分成两类：快照读 (snapshot read)与当前读 (current read)。快照读，读取的是记录的可见版本 (有可能是历史版本)，不用加锁。当前读，读取的是记录的最新版本，并且，当前读返回的记录，都会加上锁，保证其他事务不会再并发修改这条记录")])]),_._v(" "),t("p",[_._v("没有问道你也可以自告奋勇,你可以这样说,我了解一点MVCC原理,还有一些问题想和面试官讨论,80%的面试官是不会拒绝你的,那你就可以开始巴巴啦")]),_._v(" "),t("p",[_._v("事务实现的方式是由两种日志做到的\nredo 重做日志 保证事务的原子性和持久性\nundo 重写日志 提供日志回滚和MVCC功能")]),_._v(" "),t("h3",{attrs:{id:"_2-简单介绍一下分布式事务-这个可能是一个重点-此处因该结合具体的业务场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-简单介绍一下分布式事务-这个可能是一个重点-此处因该结合具体的业务场景"}},[_._v("#")]),_._v(" 2. 简单介绍一下分布式事务(这个可能是一个重点,此处因该结合具体的业务场景)")]),_._v(" "),t("p",[_._v("被问到这个问题,你又赚打发了,具体回答查看连接")]),_._v(" "),t("blockquote",[t("p",[_._v("使用分布式事务的应用程序涉及一个资源管理器(RM)和一个事务管理器(TN),对于MySQL来说,资源管理器就是MySQL,事务管理器就是连接MySQL的客户端,分布式事务采用两阶段提交的方式,\n两阶段提交\n在第一个阶段: 告知TM要准备提交\n在第二个阶段: TM告知RM是否要提交或回滚")])]),_._v(" "),t("p",[_._v("分布式事务是基于 XA事务模型的,所用的命令是XA START,XA PREPARE")]),_._v(" "),t("hr"),_._v(" "),t("p",[_._v("一下内容为进阶操作,自己酌情处理")]),_._v(" "),t("h1",{attrs:{id:"事务的进阶操作-加分项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事务的进阶操作-加分项"}},[_._v("#")]),_._v(" 事务的进阶操作 加分项")]),_._v(" "),t("p",[_._v("事务的分类:")]),_._v(" "),t("ol",[t("li",[t("p",[_._v("扁平事务 保存点默认未开始的地方\n我回家的例子")])]),_._v(" "),t("li",[t("p",[_._v("带有保存点的事务")])]),_._v(" "),t("li",[t("p",[_._v("链事务 保存点模式的一种变种")])]),_._v(" "),t("li",[t("p",[_._v("嵌套事务 事务层级状态")])]),_._v(" "),t("li",[t("p",[_._v("分布式事务")])])]),_._v(" "),t("h2",{attrs:{id:"binlog日志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#binlog日志"}},[_._v("#")]),_._v(" binlog日志")]),_._v(" "),t("p",[_._v("用来主从同步")]),_._v(" "),t("h2",{attrs:{id:"隐式-存在事务-commit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#隐式-存在事务-commit"}},[_._v("#")]),_._v(" 隐式 存在事务 COMMIT")]),_._v(" "),t("ol",[t("li",[_._v("DDL语句")]),_._v(" "),t("li",[_._v("修改MySQL架构操作")]),_._v(" "),t("li",[_._v("管理语句")])]),_._v(" "),t("h2",{attrs:{id:"不好的事务习惯-亮点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不好的事务习惯-亮点"}},[_._v("#")]),_._v(" 不好的事务习惯 亮点")]),_._v(" "),t("ol",[t("li",[t("p",[_._v("在循环中提交")])]),_._v(" "),t("li",[t("p",[_._v("使用自动提交")])]),_._v(" "),t("li",[t("p",[_._v("使用自动回滚")])]),_._v(" "),t("li",[t("p",[_._v("长事务\n执行时间比较长的事务")])])])])}),[],!1,null,null,null);v.default=a.exports}}]);